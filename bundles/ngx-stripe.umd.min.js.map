{"version":3,"file":"ngx-stripe.umd.min.js","sources":["../../src/interfaces/sources.ts","../../src/interfaces/token.ts","../../src/services/window-ref.ts","../../src/services/document-ref.ts","../../src/services/api-loader.service.ts","../../src/interfaces/stripe.ts","../../src/services/stripe.service.ts","../../src/components/stripe-card.component.ts","../../src/modules/ngx-stripe.module.ts"],"sourcesContent":["import {  Error, Address } from './utils';\n\nexport interface Source {\n  id: string;\n  object: 'source';\n  amount: number;\n  client_secret: string;\n  code_verification?: {\n    attempts_remaining: number;\n    status: 'pending' | 'succeded' | 'failed';\n  };\n  created: number;\n  currency: string;\n  flow: FlowTypes;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  owner: {\n    address: Address;\n    email: string;\n    name: string;\n    phone: string;\n    verified_address: Address;\n    verified_email: string;\n    verified_name: string;\n    verified_phone: string;\n  };\n  receiver: {\n    address: string;\n    amount_charged: number;\n    amount_received: number;\n    amount_returned: number;\n    redirect?: {\n      return_url: string;\n      status: 'pending' | 'succeeded' | 'failed';\n      url: string;\n    }\n  };\n  status: 'canceled' | 'chargeable' | 'consumed' | 'failed' | 'pending';\n  type: 'card' | 'three_d_secure' | 'giropay' | 'sepa_bit' | 'ideal' | 'sofort' | 'bancontact';\n  usage: UsageTypes;\n}\n\nexport type UsageTypes = 'reusable' | 'single_use';\nexport type FlowTypes = 'redirect' | 'receiver' | 'code_verification' | 'none';\n\nexport interface SourceParams {\n  id: string;\n  client_secret: string;\n}\n\nexport interface SourceData {\n  type: string;\n  amount?: number;\n  currency?: string;\n  flow?: FlowTypes;\n  metadata?: { [key: string]: any };\n  owner?: {\n    address?: Address,\n    email?: string,\n    name?: string,\n    phone?: string;\n  };\n  redirect?: {\n    [key: string]: any;\n    return_url: string;\n  };\n  token?: string;\n  usage?: UsageTypes;\n}\n/**\n * @param {?} sourceData\n * @return {?}\n */\nexport function isSourceData(sourceData: any): sourceData is SourceData {\n  return 'type' in sourceData;\n}\n\nexport interface SourceResult {\n  source?: Source;\n  error?: Error;\n}\n","import { Error } from './utils';\n\nexport interface Token {\n  id: string;\n  object: 'token';\n  bank_account?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'bank_account';\n    account_holder_name: string;\n    account_holder_type: 'individual' | 'company';\n    bank_name: string;\n    last4: string;\n    routing_number: string;\n    status: 'new' | 'validated' | 'verified' | 'verification_failded' | 'errored';\n  };\n  card?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'card';\n    address_city: string;\n    address_country: string;\n    address_line1: string;\n    address_line1_check: FieldCheck;\n    address_line2: string;\n    address_state: string;\n    address_zip: string;\n    address_zip_check: FieldCheck;\n    brand: string;\n    cvc_check: FieldCheck;\n    dynamic_last4: string;\n    exp_month: number;\n    exp_year: number;\n    funding: 'credit' | 'debit' | 'prepaid' | 'unknown';\n    last4: string;\n    metadata: { [key: string ]: any };\n    name: string;\n    tokenization_method: 'apple_pay' | 'android_pay';\n  };\n  client_ip: string;\n  livemode: boolean;\n  type: 'card' | 'bank_account';\n  used: boolean;\n}\n\nexport type FieldCheck = 'pass' | 'fail' | 'unavailable' | 'unchecked';\n\nexport interface CardDataOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: string;\n}\n\nexport interface TokenResult {\n  token?: Token;\n  error?: Error;\n}\n\nexport type BankAccount = 'bank_account';\n\nexport interface BankAccountData {\n  country: string;\n  currency: string;\n  routing_number: string;\n  account_number: string;\n  account_holder_name: string;\n  account_holder_type: 'individual' | 'company';\n}\n\nexport type Pii = 'pii';\n\nexport interface PiiData {\n  personal_id_number: string;\n}\n/**\n * @param {?} account\n * @return {?}\n */\nexport function isBankAccount(account: any): account is BankAccount {\n  return account === 'bank_account';\n}\n/**\n * @param {?} bankAccountData\n * @return {?}\n */\nexport function isBankAccountData(bankAccountData: any): bankAccountData is BankAccountData {\n  return 'country' in bankAccountData &&\n    'currency' in bankAccountData &&\n    'routing_number' in bankAccountData &&\n    'account_number' in bankAccountData &&\n    'account_holder_name' in bankAccountData &&\n    'account_holder_type' in bankAccountData &&\n    (bankAccountData.account_holder_type === 'individual' ||\n      bankAccountData.account_holder_type === 'company');\n}\n/**\n * @param {?} pii\n * @return {?}\n */\nexport function isPii(pii: any): pii is Pii {\n  return pii === 'pii';\n}\n/**\n * @param {?} piiData\n * @return {?}\n */\nexport function isPiiData(piiData: any): piiData is PiiData {\n  return 'personal_id_number' in piiData;\n}\n","\nexport class WindowRef {\n/**\n * @return {?}\n */\npublic getNativeWindow(): Window {\n    return window;\n  }\n}\n","\nexport class DocumentRef {\n/**\n * @return {?}\n */\npublic getNativeDocument(): Document {\n    return document;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { WindowRef } from './window-ref';\nimport { DocumentRef } from './document-ref';\n\nexport interface Status {\n  loaded: boolean;\n  loading: boolean;\n  error: boolean;\n}\nexport class LazyStripeAPILoader {\nprivate status: BehaviorSubject<Status> = new BehaviorSubject<Status>({\n    error: false,\n    loaded: false,\n    loading: false\n  });\n/**\n * @param {?} window\n * @param {?} document\n */\nconstructor(\nprivate window: WindowRef,\nprivate document: DocumentRef) {}\n/**\n * @return {?}\n */\npublic asStream(): Observable<Status> {\n    this.load();\n    return this.status.asObservable();\n  }\n/**\n * @return {?}\n */\npublic isReady(): boolean {\n    return this.status.getValue().loaded;\n  }\n/**\n * @return {?}\n */\npublic load() {\n    if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n      this.status.next({\n        error: false,\n        loaded: true,\n        loading: false\n      });\n    } else {\n      if (!this.status.getValue().loaded && !this.status.getValue().loading) {\n        this.status.next({\n          ...this.status.getValue(),\n          loading: true\n        });\n\n        const /** @type {?} */ script = this.document.getNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.src = 'https://js.stripe.com/v3/';\n\n        script.onload = () => {\n          this.status.next({\n            error: false,\n            loaded: true,\n            loading: false\n          });\n        };\n\n        script.onerror = () => {\n          this.status.next({\n            error: true,\n            loaded: false,\n            loading: false\n          });\n        };\n\n        this.document.getNativeDocument().body.appendChild(script);\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WindowRef, },\n{type: DocumentRef, },\n];\n}\n\nfunction LazyStripeAPILoader_tsickle_Closure_declarations() {\n/** @type {?} */\nLazyStripeAPILoader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLazyStripeAPILoader.ctorParameters;\n/** @type {?} */\nLazyStripeAPILoader.prototype.status;\n/** @type {?} */\nLazyStripeAPILoader.prototype.window;\n/** @type {?} */\nLazyStripeAPILoader.prototype.document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { Elements, ElementsOptions } from './elements';\nimport { Element } from './element';\nimport { CardDataOptions, TokenResult, BankAccount, BankAccountData, Pii, PiiData } from './token';\nimport { SourceData, SourceResult, SourceParams } from './sources';\n\nexport const /** @type {?} */ STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>('Stripe Publishable Key');\nexport const /** @type {?} */ STRIPE_OPTIONS = new InjectionToken<Options>('Stripe Options');\n\nexport interface StripeJS {\n  elements(options?: ElementsOptions): Elements;\n  createToken(el: Element, cardData?: CardDataOptions): Promise<TokenResult>;\n  createToken(account: BankAccount, bankAccountData: BankAccountData): Promise<TokenResult>;\n  createToken(pii: Pii, piiData: PiiData): Promise<TokenResult>;\n  createSource(el: Element, sourceData?: SourceData): Promise<SourceResult>;\n  createSource(sourceData: SourceData): Promise<SourceResult>;\n  retrieveSource(source: SourceParams): Promise<SourceResult>;\n}\n\nexport interface Options {\n  stripeAccount?: string;\n}\n","import { Injectable, Inject } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { WindowRef } from './window-ref';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport { STRIPE_PUBLISHABLE_KEY, StripeJS, STRIPE_OPTIONS } from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData,\n} from '../interfaces/token';\nexport class StripeService {\nprivate stripe: StripeJS;\n/**\n * @param {?} key\n * @param {?} options\n * @param {?} loader\n * @param {?} window\n */\nconstructor(\nprivate key: string,\nprivate options: string,\nprivate loader: LazyStripeAPILoader,\nprivate window: WindowRef) {\n    this.loader.asStream()\n      .filter((status: Status) => status.loaded === true)\n      .subscribe(() => {\n        const Stripe = (this.window.getNativeWindow() as any).Stripe;\n        this.stripe = this.options\n          ? Stripe(this.key, this.options) as StripeJS\n          : Stripe(this.key) as StripeJS;\n      });\n  }\n/**\n * @param {?=} options\n * @return {?}\n */\npublic elements(options?: ElementsOptions): Observable<Elements> {\n    return this.loader.asStream()\n      .filter((status: Status) => status.loaded === true)\n      .map(() => this.stripe.elements(options));\n  }\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\npublic createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined): Observable<TokenResult> {\n    if (isBankAccount(a) && isBankAccountData(b)) {\n      return Observable.fromPromise(this.stripe.createToken(a, b));\n    } else if (isPii(a) && isPiiData(b)) {\n      return Observable.fromPromise(this.stripe.createToken(a, b));\n    } else {\n      return Observable.fromPromise(this.stripe.createToken( /** @type {?} */((a as Element)), /** @type {?} */(( b as CardDataOptions | undefined))));\n    }\n  }\n/**\n * @param {?} a\n * @param {?=} b\n * @return {?}\n */\npublic createSource(a: Element | SourceData, b?: SourceData | undefined): Observable<SourceResult> {\n    if (isSourceData(a)) {\n      return Observable.fromPromise(this.stripe.createSource( /** @type {?} */((a as SourceData))));\n    }\n    return Observable.fromPromise(this.stripe.createSource( /** @type {?} */((a as Element)), b));\n  }\n/**\n * @param {?} source\n * @return {?}\n */\npublic retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return Observable.fromPromise(this.stripe.retrieveSource(source));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS, ] }, ]},\n{type: LazyStripeAPILoader, },\n{type: WindowRef, },\n];\n}\n\nfunction StripeService_tsickle_Closure_declarations() {\n/** @type {?} */\nStripeService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStripeService.ctorParameters;\n/** @type {?} */\nStripeService.prototype.stripe;\n/** @type {?} */\nStripeService.prototype.key;\n/** @type {?} */\nStripeService.prototype.options;\n/** @type {?} */\nStripeService.prototype.loader;\n/** @type {?} */\nStripeService.prototype.window;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output\n} from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\n\nimport { Element as StripeElement, ElementOptions } from '../interfaces/element';\nimport { StripeService } from '../services/stripe.service';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nexport class StripeCardComponent implements OnInit {\npublic onCard = new EventEmitter<StripeElement>();\nprivate card: ElementRef;\nprivate element: StripeElement;\n/**\n * @param {?} optionsIn\n * @return {?}\n */\nprivate set options(optionsIn: ElementOptions) {\n    this.options$.next(optionsIn);\n  }\nprivate options$ = new BehaviorSubject<ElementOptions>({});\n/**\n * @param {?} optionsIn\n * @return {?}\n */\nprivate set elementsOptions(optionsIn: ElementsOptions) {\n    this.elementsOptions$.next(optionsIn);\n  }\nprivate elementsOptions$ = new BehaviorSubject<ElementsOptions>({});\n/**\n * @param {?} stripeService\n */\nconstructor(private stripeService: StripeService) {}\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    const /** @type {?} */ elements$: Observable<Elements> = this.elementsOptions$\n      .asObservable()\n      .switchMap((options) => {\n        if (Object.keys(options).length > 0) {\n          return this.stripeService.elements(options);\n        }\n        return this.stripeService.elements();\n      });\n    Observable\n      .combineLatest(\n        elements$,\n        this.options$.filter((options) => Boolean(options))\n      )\n      .subscribe(([elements, options]) => {\n        this.element = elements.create('card', options);\n        this.element.mount(this.card.nativeElement);\n\n        this.onCard.emit(this.element);\n      });\n  }\n/**\n * @return {?}\n */\npublic getCard(): StripeElement {\n    return this.element;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngx-stripe-card',\n  template: `<div class=\"field\" #card></div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StripeService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onCard': [{ type: Output },],\n'card': [{ type: ViewChild, args: ['card', ] },],\n'options': [{ type: Input },],\n'elementsOptions': [{ type: Input },],\n};\n}\n\nfunction StripeCardComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nStripeCardComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStripeCardComponent.ctorParameters;\n/** @type {?} */\nStripeCardComponent.propDecorators;\n/** @type {?} */\nStripeCardComponent.prototype.onCard;\n/** @type {?} */\nStripeCardComponent.prototype.card;\n/** @type {?} */\nStripeCardComponent.prototype.element;\n/** @type {?} */\nStripeCardComponent.prototype.options$;\n/** @type {?} */\nStripeCardComponent.prototype.elementsOptions$;\n/** @type {?} */\nStripeCardComponent.prototype.stripeService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LazyStripeAPILoader } from '../services/api-loader.service';\nimport { StripeService } from '../services/stripe.service';\n\nimport { WindowRef } from '../services/window-ref';\nimport { DocumentRef } from '../services/document-ref';\n\nimport { Options, STRIPE_PUBLISHABLE_KEY, STRIPE_OPTIONS } from '../interfaces/stripe';\nimport { StripeCardComponent } from '../components/stripe-card.component';\n\nimport'rxjs/add/observable/combineLatest';\nimport'rxjs/add/observable/fromPromise';\n\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class NgxStripeModule {\n/**\n * @param {?} publishableKey\n * @param {?=} options\n * @return {?}\n */\npublic static forRoot(publishableKey: string, options?: Options): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    StripeCardComponent\n  ],\n  exports: [\n    StripeCardComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxStripeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxStripeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxStripeModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["isSourceData","sourceData","isBankAccount","account","isBankAccountData","bankAccountData","account_holder_type","isPii","pii","isPiiData","piiData","WindowRef","prototype","getNativeWindow","window","DocumentRef","getNativeDocument","document","LazyStripeAPILoader","this","status","BehaviorSubject","error","loaded","loading","asStream","load","asObservable","isReady","getValue","_this","hasOwnProperty","next","Object","assign","script","createElement","type","async","defer","src","onload","onerror","body","appendChild","decorators","Injectable","ctorParameters","STRIPE_PUBLISHABLE_KEY","InjectionToken","STRIPE_OPTIONS","StripeService","key","options","loader","filter","subscribe","Stripe","stripe","elements","map","createToken","a","b","Observable","fromPromise","createSource","retrieveSource","source","undefined","Inject","args","StripeCardComponent","stripeService","onCard","EventEmitter","options$","elementsOptions$","defineProperty","set","optionsIn","ngOnInit","elements$","switchMap","keys","length","combineLatest","Boolean","_a","element","create","mount","card","nativeElement","emit","getCard","Component","selector","template","propDecorators","Output","ViewChild","Input","elementsOptions","NgxStripeModule","forRoot","publishableKey","ngModule","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"60BAyEA,SAAAA,cAHCC,YAIC,MAHO,QAAUA,YCgBnB,QAAAC,eAHCC,SAIC,MAHmB,iBAAZA,QAST,QAAAC,mBANCC,iBAOC,MANO,WAAaA,kBAOlB,YANcA,kBAOd,kBANoBA,kBAOpB,kBANoBA,kBAOpB,uBANyBA,kBAOzB,uBANyBA,mBACgB,eAMxCA,gBANgBC,qBACyB,YAMxCD,gBANgBC,qBAYtB,QAAAC,OATCC,KAUC,MATe,QAARA,IAeT,QAAAC,WAZCC,SAaC,MAZO,sBAAwBA,SCvGjC,GAAAC,WAAA,WAAA,QAAAA,cAOA,MANGA,WAAHC,UAAAC,gBAAG,WAIC,MAHOC,SAKXH,aCPAI,YAAA,WAAA,QAAAA,gBAOA,MANGA,aAAHH,UAAAI,kBAAG,WAIC,MAHOC,WAKXF,eCKAG,oBAAA,WAUA,QAAAA,qBAAYJ,OACAG,UADAE,KAAZL,OAAYA,OACAK,KAAZF,SAAYA,SARFE,KAAVC,OAA4C,GAAIC,sBAAhDA,iBADIC,OAEO,EADPC,QAEQ,EADRC,SAES,UAOVN,qBAAHN,UAAAa,SAAG,WAKC,MADAN,MAHKO,OACEP,KAAKC,OAAOO,gBAGpBT,oBAAHN,UAAAgB,QAAG,WAMC,MALOT,MAAKC,OAAOS,WAAWN,QAG/BL,oBAAHN,UAAAc,KAAG,WAAA,GAAHI,OAAAX,IAQI,IAAIA,KAPKL,OAAOD,kBAAkBkB,eAAe,UAQ/CZ,KAPKC,OAAOY,MAQVV,OAPO,EAQPC,QAPQ,EAQRC,SAPS,QAUX,KAPKL,KAAKC,OAAOS,WAAWN,SAAUJ,KAAMC,OAAOS,WAAWL,QAAS,CAQrEL,KAPKC,OAAOY,KAOpBC,OAAAC,UACaf,KAPKC,OAAOS,YAQfL,SAPS,IAUX,IAPMW,QAAShB,KAAKF,SAASD,oBAAoBoB,cAAc,SAQ/DD,QAPOE,KAAO,kBAQdF,OAPOG,OAAQ,EAQfH,OAPOI,OAAQ,EAQfJ,OAPOK,IAAM,4BASbL,OAPOM,OAAS,WAQdX,MAPKV,OAAOY,MAQVV,OAPO,EAQPC,QAPQ,EAQRC,SAPS,KAWbW,OAPOO,QAAU,WAQfZ,MAPKV,OAAOY,MAQVV,OAPO,EAQPC,QAPQ,EAQRC,SAPS,KAWbL,KAPKF,SAASD,oBAAoB2B,KAAKC,YAAYT,gCAIpDjB,qBAAP2B,aACER,KAAMS,cAORA,aAJC5B,oBAAD6B,eAAC,WAAA,QAUAV,KAAM1B,YACN0B,KAAMtB,cCnFA,IAAMiC,wBAAyB,GAAIC,eAA1CA,eAAgE,0BACnDC,eAAiB,GAAID,eAAlCA,eAAyD,kBCoBzDE,cAAA,WAQA,QAAAA,eAFaC,IACAC,QACDC,OACAxC,QADZ,GAAAgB,OAAAX,IAFaA,MAAbiC,IAAaA,IACAjC,KAAbkC,QAAaA,QACDlC,KAAZmC,OAAYA,OACAnC,KAAZL,OAAYA,OAIRK,KAAKmC,OAAO7B,WACT8B,OAAO,SAACnC,QAAmB,OAAkB,IAAlBA,OAAOG,SAClCiC,UAAU,WACT,GAAMC,QAAU3B,MAAKhB,OAAOD,kBAA0B4C,MACtD3B,OAAK4B,OAAS5B,MAAKuB,QACfI,OAAO3B,MAAKsB,IAAKtB,MAAKuB,SACtBI,OAAO3B,MAAKsB,aACrBD,eAAHvC,UAAA+C,SAAG,SAAAN,SAAA,GAAHvB,OAAAX,IAOI,OANOA,MAAKmC,OAAO7B,WAOhB8B,OANO,SAACnC,QAAmB,OAAkB,IAAlBA,OAAOG,SAOlCqC,IANI,WAAM,MAAA9B,OAAK4B,OAAOC,SAASN,YAGnCF,cAAHvC,UAAAiD,YAAG,SAWCC,EACAC,GACA,MAAI7D,eAVc4D,IAAM1D,kBAAkB2D,GACjCC,gBAUbA,WAVwBC,YAAY9C,KAAKuC,OAAOG,YAAYC,EAAGC,KACpDxD,MAAUuD,IAAMrD,UAAUsD,GACxBC,gBAUbA,WAVwBC,YAAY9C,KAAKuC,OAAOG,YAAYC,EAAGC,MAM5DZ,cAAHvC,UAAAsD,aAAG,SAAAJ,EAAAC,GAeC,MAAI/D,cAda8D,GACRE,gBAcbA,WAdwBC,YAAY9C,KAAKuC,OAAOQ,aAchD,IAZWF,gBAcXA,WAdsBC,YAAY9C,KAAKuC,OAAOQ,aAc9C,EAdyEH,KAGtEZ,cAAHvC,UAAAuD,eAAG,SAAAC,QAkBC,MAjBOJ,iBAiBXA,WAjBsBC,YAAY9C,KAAKuC,OAAOS,eAAeC,0BAGtDjB,eAAPN,aACER,KAAMS,cAiBRA,aAdCK,cAADJ,eAAC,WAAA,QAoBAV,SAAMgC,GAAWxB,aAAeR,KAAMiC,cAAvCA,OAA+CC,MAAOvB,4BACrDX,SAAMgC,GAAWxB,aAAeR,KAAMiC,cAAvCA,OAA+CC,MAAOrB,oBACrDb,KAAMnB,sBACNmB,KAAM1B,YCxFP,IAAA6D,qBAAA,WAuBA,QAAAA,qBAPsBC,eAAAtD,KAAtBsD,cAAsBA,cAbZtD,KAAVuD,OAAmB,GAAIC,eAAvBA,aAOUxD,KAAVyD,SAAqB,GAAIvD,sBAAzBA,oBAIUF,KAAV0D,iBAA6B,GAAIxD,sBAAjCA,0BANAY,QAAA6C,eADIN,oBACJ5D,UAAA,WAAAmE,IAAA,SADIC,WAEA7D,KADKyD,SAAS5C,KAAKgD,4CAQvB/C,OAAA6C,eALIN,oBAKJ5D,UAAA,mBAAAmE,IAAA,SALIC,WAMA7D,KALK0D,iBAAiB7C,KAAKgD,4CAM5BR,oBAAH5D,UAAAqE,SAAG,WAAA,GAAHnD,OAAAX,KACU+D,UAAkC/D,KAAK0D,iBAU1ClD,eACAwD,UATU,SAAC9B,SAUV,MAAIpB,QATOmD,KAAK/B,SAASgC,OAAS,EACzBvD,MAAK2C,cAAcd,SAASN,SAE9BvB,MAAK2C,cAAcd,YAW9BK,iBAAJA,WACOsB,cACCJ,UACA/D,KATKyD,SAASrB,OAAO,SAACF,SAAY,MAAAkC,SAAQlC,YAW3CG,UATU,SAACgC,IAAlB,GAAmB7B,UAAnB6B,GAAA,GAA6BnC,QAA7BmC,GAAA,EAUQ1D,OATK2D,QAAU9B,SAAS+B,OAAO,OAAQrC,SAUvCvB,MATK2D,QAAQE,MAAM7D,MAAK8D,KAAKC,eAW7B/D,MATK4C,OAAOoB,KAAKhE,MAAK2D,YAI3BjB,oBAAH5D,UAAAmF,QAAG,WAYC,MAXO5E,MAAKsE,+BAETjB,qBAAP3B,aACER,KAAM2D,cAWRA,UAXmBzB,OAYjB0B,SAXU,kBAYVC,SAXU,sCAIX1B,oBAADzB,eAAC,WAAA,QAcAV,KAAMc,iBAXAqB,oBAAP2B,gBAcAzB,SAbarC,KAAM+D,cAanBA,SACAR,OAbWvD,KAAMgE,cAajBA,UAb4B9B,MAAM,UAclClB,UAbchB,KAAMiE,cAapBA,QACAC,kBAbsBlE,KAAMiE,cAa5BA,QCrEA,IAAAE,iBAAA,WAAA,QAAAA,0BAIGA,iBAAHC,QAAG,SAAAC,eAAArD,SAGC,OACEsD,SAFUH,gBAGVI,WACE1F,oBACAiC,cACAxC,UACAI,aAEE8F,QAFS7D,uBAGT8D,SAFUJ,iBAKVG,QAFS3D,eAGT4D,SAFUzD,8BAKbmD,iBAAP3D,aACER,KAAM0E,cAERA,SAFkBxC,OAGhByC,cACExC,qBAEFyC,SACEzC,yBAGHgC,gBAADzD,eAAC,WAAA"}