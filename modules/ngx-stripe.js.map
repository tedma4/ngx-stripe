{"version":3,"file":"ngx-stripe.js","sources":["../../index.ts","../../public_api.ts","../../src/ngx-stripe.ts","../../src/modules/ngx-stripe.module.ts","../../src/components/stripe-card.component.ts","../../src/services/stripe.service.ts","../../src/interfaces/token.ts","../../src/interfaces/sources.ts","../../src/interfaces/stripe.ts","../../src/services/api-loader.service.ts","../../src/services/document-ref.ts","../../src/services/window-ref.ts"],"sourcesContent":["/**\n * Generated bundle index. Do not edit.\n */\n\nexport {NgxStripeModule,StripeCardComponent,StripeService,LazyStripeAPILoader,WindowRef,DocumentRef,Element,ElementEventType,ElementType,ElementOptions,ElementStyleAttributes,Elements,ElementsOptions,FontElement,Source,UsageTypes,FlowTypes,SourceParams,SourceData,isSourceData,SourceResult,STRIPE_PUBLISHABLE_KEY,STRIPE_OPTIONS,StripeJS,Options,Token,FieldCheck,CardDataOptions,TokenResult,BankAccount,BankAccountData,Pii,PiiData,isBankAccount,isBankAccountData,isPii,isPiiData,Error,Address} from './public_api';\n","/**\n * Entry point for all public APIs of the package.\n */\nexport {NgxStripeModule,StripeCardComponent,StripeService,LazyStripeAPILoader,WindowRef,DocumentRef,Element,ElementEventType,ElementType,ElementOptions,ElementStyleAttributes,Elements,ElementsOptions,FontElement,Source,UsageTypes,FlowTypes,SourceParams,SourceData,isSourceData,SourceResult,STRIPE_PUBLISHABLE_KEY,STRIPE_OPTIONS,StripeJS,Options,Token,FieldCheck,CardDataOptions,TokenResult,BankAccount,BankAccountData,Pii,PiiData,isBankAccount,isBankAccountData,isPii,isPiiData,Error,Address} from './src/ngx-stripe';\n","// Public classes.\nexport { NgxStripeModule } from './modules/ngx-stripe.module';\n\nexport { StripeCardComponent } from './components/stripe-card.component';\n\nexport { StripeService } from './services/stripe.service';\nexport { LazyStripeAPILoader } from './services/api-loader.service';\n\nexport { WindowRef } from './services/window-ref';\nexport { DocumentRef } from './services/document-ref';\n\nexport {\n  Element,\n  ElementEventType,\n  ElementType,\n  ElementOptions,\n  ElementStyleAttributes\n} from './interfaces/element';\n\nexport {\n  Elements,\n  ElementsOptions,\n  FontElement\n} from './interfaces/elements';\n\nexport {\n  Source,\n  UsageTypes,\n  FlowTypes,\n  SourceParams,\n  SourceData,\n  isSourceData,\n  SourceResult\n} from './interfaces/sources';\n\nexport {\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS,\n  StripeJS,\n  Options\n} from './interfaces/stripe';\n\nexport {\n  Token,\n  FieldCheck,\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  Pii,\n  PiiData,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from './interfaces/token';\n\nexport {\n  Error,\n  Address\n} from './interfaces/utils';\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LazyStripeAPILoader } from '../services/api-loader.service';\nimport { StripeService } from '../services/stripe.service';\n\nimport { WindowRef } from '../services/window-ref';\nimport { DocumentRef } from '../services/document-ref';\n\nimport { Options, STRIPE_PUBLISHABLE_KEY, STRIPE_OPTIONS } from '../interfaces/stripe';\nimport { StripeCardComponent } from '../components/stripe-card.component';\n\nimport'rxjs/add/observable/combineLatest';\nimport'rxjs/add/observable/fromPromise';\n\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/filter';\nimport'rxjs/add/operator/map';\nexport class NgxStripeModule {\n/**\n * @param {?} publishableKey\n * @param {?=} options\n * @return {?}\n */\npublic static forRoot(publishableKey: string, options?: Options): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  declarations: [\n    StripeCardComponent\n  ],\n  exports: [\n    StripeCardComponent\n  ]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction NgxStripeModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNgxStripeModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNgxStripeModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output\n} from '@angular/core';\n\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\n\nimport { Element as StripeElement, ElementOptions } from '../interfaces/element';\nimport { StripeService } from '../services/stripe.service';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nexport class StripeCardComponent implements OnInit {\npublic onCard = new EventEmitter<StripeElement>();\nprivate card: ElementRef;\nprivate element: StripeElement;\n/**\n * @param {?} optionsIn\n * @return {?}\n */\nprivate set options(optionsIn: ElementOptions) {\n    this.options$.next(optionsIn);\n  }\nprivate options$ = new BehaviorSubject<ElementOptions>({});\n/**\n * @param {?} optionsIn\n * @return {?}\n */\nprivate set elementsOptions(optionsIn: ElementsOptions) {\n    this.elementsOptions$.next(optionsIn);\n  }\nprivate elementsOptions$ = new BehaviorSubject<ElementsOptions>({});\n/**\n * @param {?} stripeService\n */\nconstructor(private stripeService: StripeService) {}\n/**\n * @return {?}\n */\npublic ngOnInit() {\n    const /** @type {?} */ elements$: Observable<Elements> = this.elementsOptions$\n      .asObservable()\n      .switchMap((options) => {\n        if (Object.keys(options).length > 0) {\n          return this.stripeService.elements(options);\n        }\n        return this.stripeService.elements();\n      });\n    Observable\n      .combineLatest(\n        elements$,\n        this.options$.filter((options) => Boolean(options))\n      )\n      .subscribe(([elements, options]) => {\n        this.element = elements.create('card', options);\n        this.element.mount(this.card.nativeElement);\n\n        this.onCard.emit(this.element);\n      });\n  }\n/**\n * @return {?}\n */\npublic getCard(): StripeElement {\n    return this.element;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngx-stripe-card',\n  template: `<div class=\"field\" #card></div>`\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StripeService, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'onCard': [{ type: Output },],\n'card': [{ type: ViewChild, args: ['card', ] },],\n'options': [{ type: Input },],\n'elementsOptions': [{ type: Input },],\n};\n}\n\nfunction StripeCardComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nStripeCardComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStripeCardComponent.ctorParameters;\n/** @type {?} */\nStripeCardComponent.propDecorators;\n/** @type {?} */\nStripeCardComponent.prototype.onCard;\n/** @type {?} */\nStripeCardComponent.prototype.card;\n/** @type {?} */\nStripeCardComponent.prototype.element;\n/** @type {?} */\nStripeCardComponent.prototype.options$;\n/** @type {?} */\nStripeCardComponent.prototype.elementsOptions$;\n/** @type {?} */\nStripeCardComponent.prototype.stripeService;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Inject } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\n\nimport { WindowRef } from './window-ref';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport { STRIPE_PUBLISHABLE_KEY, StripeJS, STRIPE_OPTIONS } from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData,\n} from '../interfaces/token';\nexport class StripeService {\nprivate stripe: StripeJS;\n/**\n * @param {?} key\n * @param {?} options\n * @param {?} loader\n * @param {?} window\n */\nconstructor(\nprivate key: string,\nprivate options: string,\nprivate loader: LazyStripeAPILoader,\nprivate window: WindowRef) {\n    this.loader.asStream()\n      .filter((status: Status) => status.loaded === true)\n      .subscribe(() => {\n        const Stripe = (this.window.getNativeWindow() as any).Stripe;\n        this.stripe = this.options\n          ? Stripe(this.key, this.options) as StripeJS\n          : Stripe(this.key) as StripeJS;\n      });\n  }\n/**\n * @param {?=} options\n * @return {?}\n */\npublic elements(options?: ElementsOptions): Observable<Elements> {\n    return this.loader.asStream()\n      .filter((status: Status) => status.loaded === true)\n      .map(() => this.stripe.elements(options));\n  }\n/**\n * @param {?} a\n * @param {?} b\n * @return {?}\n */\npublic createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined): Observable<TokenResult> {\n    if (isBankAccount(a) && isBankAccountData(b)) {\n      return Observable.fromPromise(this.stripe.createToken(a, b));\n    } else if (isPii(a) && isPiiData(b)) {\n      return Observable.fromPromise(this.stripe.createToken(a, b));\n    } else {\n      return Observable.fromPromise(this.stripe.createToken( /** @type {?} */((a as Element)), /** @type {?} */(( b as CardDataOptions | undefined))));\n    }\n  }\n/**\n * @param {?} a\n * @param {?=} b\n * @return {?}\n */\npublic createSource(a: Element | SourceData, b?: SourceData | undefined): Observable<SourceResult> {\n    if (isSourceData(a)) {\n      return Observable.fromPromise(this.stripe.createSource( /** @type {?} */((a as SourceData))));\n    }\n    return Observable.fromPromise(this.stripe.createSource( /** @type {?} */((a as Element)), b));\n  }\n/**\n * @param {?} source\n * @return {?}\n */\npublic retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return Observable.fromPromise(this.stripe.retrieveSource(source));\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: undefined, decorators: [{ type: Inject, args: [STRIPE_PUBLISHABLE_KEY, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [STRIPE_OPTIONS, ] }, ]},\n{type: LazyStripeAPILoader, },\n{type: WindowRef, },\n];\n}\n\nfunction StripeService_tsickle_Closure_declarations() {\n/** @type {?} */\nStripeService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStripeService.ctorParameters;\n/** @type {?} */\nStripeService.prototype.stripe;\n/** @type {?} */\nStripeService.prototype.key;\n/** @type {?} */\nStripeService.prototype.options;\n/** @type {?} */\nStripeService.prototype.loader;\n/** @type {?} */\nStripeService.prototype.window;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Error } from './utils';\n\nexport interface Token {\n  id: string;\n  object: 'token';\n  bank_account?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'bank_account';\n    account_holder_name: string;\n    account_holder_type: 'individual' | 'company';\n    bank_name: string;\n    last4: string;\n    routing_number: string;\n    status: 'new' | 'validated' | 'verified' | 'verification_failded' | 'errored';\n  };\n  card?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'card';\n    address_city: string;\n    address_country: string;\n    address_line1: string;\n    address_line1_check: FieldCheck;\n    address_line2: string;\n    address_state: string;\n    address_zip: string;\n    address_zip_check: FieldCheck;\n    brand: string;\n    cvc_check: FieldCheck;\n    dynamic_last4: string;\n    exp_month: number;\n    exp_year: number;\n    funding: 'credit' | 'debit' | 'prepaid' | 'unknown';\n    last4: string;\n    metadata: { [key: string ]: any };\n    name: string;\n    tokenization_method: 'apple_pay' | 'android_pay';\n  };\n  client_ip: string;\n  livemode: boolean;\n  type: 'card' | 'bank_account';\n  used: boolean;\n}\n\nexport type FieldCheck = 'pass' | 'fail' | 'unavailable' | 'unchecked';\n\nexport interface CardDataOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: string;\n}\n\nexport interface TokenResult {\n  token?: Token;\n  error?: Error;\n}\n\nexport type BankAccount = 'bank_account';\n\nexport interface BankAccountData {\n  country: string;\n  currency: string;\n  routing_number: string;\n  account_number: string;\n  account_holder_name: string;\n  account_holder_type: 'individual' | 'company';\n}\n\nexport type Pii = 'pii';\n\nexport interface PiiData {\n  personal_id_number: string;\n}\n/**\n * @param {?} account\n * @return {?}\n */\nexport function isBankAccount(account: any): account is BankAccount {\n  return account === 'bank_account';\n}\n/**\n * @param {?} bankAccountData\n * @return {?}\n */\nexport function isBankAccountData(bankAccountData: any): bankAccountData is BankAccountData {\n  return 'country' in bankAccountData &&\n    'currency' in bankAccountData &&\n    'routing_number' in bankAccountData &&\n    'account_number' in bankAccountData &&\n    'account_holder_name' in bankAccountData &&\n    'account_holder_type' in bankAccountData &&\n    (bankAccountData.account_holder_type === 'individual' ||\n      bankAccountData.account_holder_type === 'company');\n}\n/**\n * @param {?} pii\n * @return {?}\n */\nexport function isPii(pii: any): pii is Pii {\n  return pii === 'pii';\n}\n/**\n * @param {?} piiData\n * @return {?}\n */\nexport function isPiiData(piiData: any): piiData is PiiData {\n  return 'personal_id_number' in piiData;\n}\n","import {  Error, Address } from './utils';\n\nexport interface Source {\n  id: string;\n  object: 'source';\n  amount: number;\n  client_secret: string;\n  code_verification?: {\n    attempts_remaining: number;\n    status: 'pending' | 'succeded' | 'failed';\n  };\n  created: number;\n  currency: string;\n  flow: FlowTypes;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  owner: {\n    address: Address;\n    email: string;\n    name: string;\n    phone: string;\n    verified_address: Address;\n    verified_email: string;\n    verified_name: string;\n    verified_phone: string;\n  };\n  receiver: {\n    address: string;\n    amount_charged: number;\n    amount_received: number;\n    amount_returned: number;\n    redirect?: {\n      return_url: string;\n      status: 'pending' | 'succeeded' | 'failed';\n      url: string;\n    }\n  };\n  status: 'canceled' | 'chargeable' | 'consumed' | 'failed' | 'pending';\n  type: 'card' | 'three_d_secure' | 'giropay' | 'sepa_bit' | 'ideal' | 'sofort' | 'bancontact';\n  usage: UsageTypes;\n}\n\nexport type UsageTypes = 'reusable' | 'single_use';\nexport type FlowTypes = 'redirect' | 'receiver' | 'code_verification' | 'none';\n\nexport interface SourceParams {\n  id: string;\n  client_secret: string;\n}\n\nexport interface SourceData {\n  type: string;\n  amount?: number;\n  currency?: string;\n  flow?: FlowTypes;\n  metadata?: { [key: string]: any };\n  owner?: {\n    address?: Address,\n    email?: string,\n    name?: string,\n    phone?: string;\n  };\n  redirect?: {\n    [key: string]: any;\n    return_url: string;\n  };\n  token?: string;\n  usage?: UsageTypes;\n}\n/**\n * @param {?} sourceData\n * @return {?}\n */\nexport function isSourceData(sourceData: any): sourceData is SourceData {\n  return 'type' in sourceData;\n}\n\nexport interface SourceResult {\n  source?: Source;\n  error?: Error;\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { Elements, ElementsOptions } from './elements';\nimport { Element } from './element';\nimport { CardDataOptions, TokenResult, BankAccount, BankAccountData, Pii, PiiData } from './token';\nimport { SourceData, SourceResult, SourceParams } from './sources';\n\nexport const /** @type {?} */ STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>('Stripe Publishable Key');\nexport const /** @type {?} */ STRIPE_OPTIONS = new InjectionToken<Options>('Stripe Options');\n\nexport interface StripeJS {\n  elements(options?: ElementsOptions): Elements;\n  createToken(el: Element, cardData?: CardDataOptions): Promise<TokenResult>;\n  createToken(account: BankAccount, bankAccountData: BankAccountData): Promise<TokenResult>;\n  createToken(pii: Pii, piiData: PiiData): Promise<TokenResult>;\n  createSource(el: Element, sourceData?: SourceData): Promise<SourceResult>;\n  createSource(sourceData: SourceData): Promise<SourceResult>;\n  retrieveSource(source: SourceParams): Promise<SourceResult>;\n}\n\nexport interface Options {\n  stripeAccount?: string;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\n\nimport { WindowRef } from './window-ref';\nimport { DocumentRef } from './document-ref';\n\nexport interface Status {\n  loaded: boolean;\n  loading: boolean;\n  error: boolean;\n}\nexport class LazyStripeAPILoader {\nprivate status: BehaviorSubject<Status> = new BehaviorSubject<Status>({\n    error: false,\n    loaded: false,\n    loading: false\n  });\n/**\n * @param {?} window\n * @param {?} document\n */\nconstructor(\nprivate window: WindowRef,\nprivate document: DocumentRef) {}\n/**\n * @return {?}\n */\npublic asStream(): Observable<Status> {\n    this.load();\n    return this.status.asObservable();\n  }\n/**\n * @return {?}\n */\npublic isReady(): boolean {\n    return this.status.getValue().loaded;\n  }\n/**\n * @return {?}\n */\npublic load() {\n    if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n      this.status.next({\n        error: false,\n        loaded: true,\n        loading: false\n      });\n    } else {\n      if (!this.status.getValue().loaded && !this.status.getValue().loading) {\n        this.status.next({\n          ...this.status.getValue(),\n          loading: true\n        });\n\n        const /** @type {?} */ script = this.document.getNativeDocument().createElement('script');\n        script.type = 'text/javascript';\n        script.async = true;\n        script.defer = true;\n        script.src = 'https://js.stripe.com/v3/';\n\n        script.onload = () => {\n          this.status.next({\n            error: false,\n            loaded: true,\n            loading: false\n          });\n        };\n\n        script.onerror = () => {\n          this.status.next({\n            error: true,\n            loaded: false,\n            loading: false\n          });\n        };\n\n        this.document.getNativeDocument().body.appendChild(script);\n      }\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: WindowRef, },\n{type: DocumentRef, },\n];\n}\n\nfunction LazyStripeAPILoader_tsickle_Closure_declarations() {\n/** @type {?} */\nLazyStripeAPILoader.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLazyStripeAPILoader.ctorParameters;\n/** @type {?} */\nLazyStripeAPILoader.prototype.status;\n/** @type {?} */\nLazyStripeAPILoader.prototype.window;\n/** @type {?} */\nLazyStripeAPILoader.prototype.document;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","\nexport class DocumentRef {\n/**\n * @return {?}\n */\npublic getNativeDocument(): Document {\n    return document;\n  }\n}\n","\nexport class WindowRef {\n/**\n * @return {?}\n */\npublic getNativeWindow(): Window {\n    return window;\n  }\n}\n"],"names":[],"mappings":"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"}